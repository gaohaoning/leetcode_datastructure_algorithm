#!/usr/bin/env python
# coding:utf-8

"""
454. 四数相加 II
难度
中等

给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。

为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。所有整数的范围在 -228 到 228 - 1 之间，最终结果不会超过 231 - 1 。

例如:

输入:
A = [ 1, 2]
B = [-2,-1]
C = [-1, 2]
D = [ 0, 2]

输出:
2

解释:
两个元组如下:
1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0
"""
# ================================================================================
"""
思路:
    使用字典, 以空间换时间
方法:
    [1] AB 一组，遍历求和，存入 Counter；
    [2] 遍历 CD，求和，取相反数，查询在 AB 的 Counter 中出现次数，累计求和。
时间复杂度:
    O(n**2 + n**2) =
    O(n**2) 
空间复杂度: 
    O(n**2)
"""


class Solution(object):
    def fourSumCount(self, A, B, C, D):
        """
        :type A: List[int]
        :type B: List[int]
        :type C: List[int]
        :type D: List[int]
        :rtype: int
        """
        counter = {}
        n = 0
        for a in A:
            for b in B:
                counter[a + b] = counter.get(a + b, 0) + 1
                pass
            pass
        for c in C:
            for d in D:
                n += counter.get(-(c + d), 0)
                pass
            pass
        return n

# ================================================================================
# ================================================================================
# ================================================================================
# ================================================================================
# ================================================================================
