#!/usr/bin/env python
# coding:utf-8

"""
154. 寻找旋转排序数组中的最小值 II
难度
困难

假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。

请找出其中最小的元素。

注意数组中可能存在重复的元素。

示例 1：

输入: [1,3,5]
输出: 1
示例 2：

输入: [2,2,2,0,1]
输出: 0
说明：

这道题是 寻找旋转排序数组中的最小值 的延伸题目。
允许重复会影响算法的时间复杂度吗？会如何影响，为什么？
"""


# ================================================================================
"""
思路: 寻找旋转点即可(二分查找)(有重复元素的有序数组)
"""
"""
思路:
    参考 LeetCode153
不同点:
    由于存在重复元素，所以在进行元素值比较时需要:
        1.比较 left 和 right 时，如果值相等，将 left 右移至与 right 不等的值;
        2.比较 mid 和 right 时，如果值相等，将 right 左移至 mid 与 right 不等;
"""
class Solution(object):
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        left, right = 0, len(nums) - 1
        while left < right:
            # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            # 在正式比较之前，先移动左指针，使得它指向一个和右指针不同的数字上。
            if nums[left] == nums[right]:
                left += 1
                continue
            # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            mid = (left + right)/2
            if nums[mid] == nums[right]:
                # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                # 如果 mid 和 right 值相等，则 right 左移直至 mid 和 right 不等。
                right -= 1
                continue
                # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            elif nums[mid] > nums[right]:
                left = mid + 1
            elif nums[mid] < nums[right]:
                right = mid
                pass
            pass
        # pole = right
        pole = left
        return nums[pole]
# ================================================================================
# ================================================================================
# ================================================================================

