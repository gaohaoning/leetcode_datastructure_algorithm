#!/usr/bin/env python
# coding:utf-8

"""
二分查找 (Binary Search)

    二分查找是计算机科学中最基本、最有用的算法之一。 它描述了在有序集合中搜索特定值的过程。

    二分查找中使用的术语：
        目标 Target —— 你要查找的值
        索引 Index —— 你要查找的当前位置
        左、右指示符 Left，Right —— 我们用来维持查找空间的指标
        中间指示符 Mid —— 我们用来应用条件来确定我们应该向左查找还是向右查找的索引
"""

"""
查找过程
    首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；
    否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。
    重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。
"""

"""
如何识别二分查找？
    如前所述，二分查找是一种在每次比较之后将查找空间一分为二的算法。
    每次需要查找集合中的索引或元素时，都应该考虑二分查找。
    如果集合是无序的，我们可以总是在应用二分查找之前先对其进行排序。

二分查找一般由三个主要部分组成：
    预处理 —— 如果集合未排序，则进行排序。
    二分查找 —— 使用循环或递归在每次比较后将查找空间划分为两半。
    后处理 —— 在剩余空间中确定可行的候选者。
"""
# ================================================================================
# ================================================================================
"""
二分查找
    Time complexity : O(logN)
    Space complexity : O(1) 
"""
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right)/2
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                # left = mid  # !!!!!
                left = mid + 1
            elif nums[mid] > target:
                # right = mid  # !!!!!
                right = mid - 1
            pass
        return -1

# ================================================================================
"""
注意:

    [1]
    如果条件是 left <= right，则必须两边都动:
    left = mid + 1
    right = mid - 1
    
    [2]
    如果条件是 left < right，则可以只动一边:
    left = mid + 1
    right = mid
    
"""
# ================================================================================
# ================================================================================
# ================================================================================

