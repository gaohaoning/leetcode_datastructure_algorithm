#!/usr/bin/env python
# coding:utf-8

"""
150. 逆波兰表达式求值
难度
中等

根据逆波兰表示法，求表达式的值。

有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。

说明：

整数除法只保留整数部分。
给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。
示例 1：

输入: ["2", "1", "+", "3", "*"]
输出: 9
解释: ((2 + 1) * 3) = 9
示例 2：

输入: ["4", "13", "5", "/", "+"]
输出: 6
解释: (4 + (13 / 5)) = 6
示例 3：

输入: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
输出: 22
解释:
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
"""
# ================================================================================
"""
思路:
    栈
时间复杂度:
    O(n)
空间复杂度: 
    O(1)
"""


class Solution(object):
    def evalRPN(self, tokens):
        """
        :type tokens: List[str]
        :rtype: int
        """
        """
        注意: 处理正负数相除的情况
        """
        stack = []
        for t in tokens:
            if t not in ('+', '-', '*', '/'):
                stack.append(t)
                # print stack
                pass
            else:
                b = stack.pop()
                a = stack.pop()
                if int(a)*int(b) < 0 and t == '/':
                    stack.append(eval(
                        '(-1) * ((-1)*%s %s %s)' % (a, t, b)
                    ))
                    pass
                else:
                    stack.append(eval(
                        '%s %s %s' % (a, t, b)
                    ))
                    pass
                # print stack
                pass
            pass
        return stack[0]

# ================================================================================
"""
(另一种写法，执行速度更快)
"""


class Solution(object):
    def evalRPN(self, tokens):
        """
        :type tokens: List[str]
        :rtype: int
        """
        """
        注意: 处理正负数相除的情况
        """
        stack = []
        for t in tokens:
            if t not in ('+', '-', '*', '/'):
                stack.append(int(t))
                # print stack
                pass
            else:
                b = stack.pop()
                a = stack.pop()
                if t == '+':
                    result = a + b
                    pass
                elif t == '-':
                    result = a - b
                    pass
                elif t == '*':
                    result = a * b
                    pass
                elif t == '/':
                    if a*b < 0:
                        result = -1 * (((-1)*a) / b)
                    else:
                        result = a / b
                    pass
                stack.append(result)
            pass
        return stack[0]
# ================================================================================
# ================================================================================
# ================================================================================
# ================================================================================
# ================================================================================


so = Solution()
print so.evalRPN(["10","6","9","3","+","-11","*","/","*","17","+","5","+"])
# 22
