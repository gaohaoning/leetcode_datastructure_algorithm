#!/usr/bin/env python
# coding:utf-8

"""
66. 加一
难度
简单

给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。

最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。

你可以假设除了整数 0 之外，这个整数不会以零开头。

示例 1:

输入: [1,2,3]
输出: [1,2,4]
解释: 输入数组表示数字 123。
示例 2:

输入: [4,3,2,1]
输出: [4,3,2,2]
解释: 输入数组表示数字 4321。
"""
# ================================================================================
"""
思路:
    (简单)
时间复杂度:
    O(n)
空间复杂度: 
    O(1)
"""


class Solution(object):
    def plusOne(self, digits):
        """
        :type digits: List[int]
        :rtype: List[int]
        """
        length = len(digits)
        start = length - 1
        while digits[start] == 9:
            digits[start] = 0
            # 需要判断是否需要增加位数
            if start == 0:
                digits.insert(0, 1)
                return digits
            else:
                start -= 1
            pass
        digits[start] += 1
        return digits
# ================================================================================
# ================================================================================
# ================================================================================
# ================================================================================
# ================================================================================


so = Solution()
print so.plusOne([9])
