#!/usr/bin/env python
# coding:utf-8

"""
747. 至少是其他数字两倍的最大数
难度
简单

在一个给定的数组nums中，总是存在一个最大元素 。

查找数组中的最大元素是否至少是数组中每个其他数字的两倍。

如果是，则返回最大元素的索引，否则返回-1。

示例 1:

输入: nums = [3, 6, 1, 0]
输出: 1
解释: 6是最大的整数, 对于数组中的其他整数,
6大于数组中其他元素的两倍。6的索引是1, 所以我们返回1.


示例 2:

输入: nums = [1, 2, 3, 4]
输出: -1
解释: 4没有超过3的两倍大, 所以我们返回 -1.


提示:

nums 的长度范围在[1, 50].
每个 nums[i] 的整数范围在 [0, 99].
"""
# ================================================================================
"""
思路:
    (太简单了，不再关注)
时间复杂度:
    O()
空间复杂度: 
    O()
"""


class Solution(object):
    def dominantIndex(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        m = max(nums)
        i = nums.index(m)
        nums.remove(m)
        m2 = max(nums) if nums else 0
        return i if m >= 2*m2 else -1

# ================================================================================
# ================================================================================
# ================================================================================
# ================================================================================
# ================================================================================
