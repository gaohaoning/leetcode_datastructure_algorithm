#!/usr/bin/env python
# coding:utf-8

"""
27. 移除元素
难度
简单

给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。

不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

示例 1:

给定 nums = [3,2,2,3], val = 3,

函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。

你不需要考虑数组中超出新长度后面的元素。

示例 2:

给定 nums = [0,1,2,2,3,0,4,2], val = 2,

函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。

注意这五个元素可为任意顺序。

你不需要考虑数组中超出新长度后面的元素。

"""
# ================================================================================
"""
思路:
    双指针
    (基于条件: 你不需要考虑数组中超出新长度后面的元素)
    (方法: 遍历数组，略过需要删除的值，向前移动符合条件的值)
时间复杂度:
    O(n)
空间复杂度: 
    O(1)
"""


class Solution(object):
    def removeElement(self, nums, val):
        """
        :type nums: List[int]
        :type val: int
        :rtype: int
        """
        j = 0
        for i in range(len(nums)):
            if nums[i] != val:
                nums[j] = nums[i]
                j += 1
            pass
        return j
# ================================================================================
"""
思路:
    双指针
    (基于条件: 你不需要考虑数组中超出新长度后面的元素)
    (方法: 把需要删除的元素交换到数组末尾)
时间复杂度:
    O(n)
空间复杂度: 
    O(1)
"""


class Solution(object):
    def removeElement(self, nums, val):
        """
        :type nums: List[int]
        :type val: int
        :rtype: int
        """
        length = len(nums)
        i = 0
        while i < length:
            if nums[i] != val:
                i += 1
            else:
                nums[i], nums[length - 1] = nums[length - 1], nums[i]
                length -= 1
            pass
        return length
# ================================================================================
# ================================================================================
# ================================================================================
# ================================================================================
