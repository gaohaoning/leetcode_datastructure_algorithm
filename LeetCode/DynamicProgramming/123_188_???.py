#!/usr/bin/env python
# coding:utf-8

"""
动态规划
"""

"""
123. 买卖股票的最佳时机 III

给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入: [3,3,5,0,0,3,1,4]
输出: 6
解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
示例 2:

输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3:

输入: [7,6,4,3,1] 
输出: 0 
解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。
"""




"""
188. 买卖股票的最佳时机 IV

给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。

注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入: [2,4,1], k = 2
输出: 2
解释: 在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。
示例 2:

输入: [3,2,6,5,0,3], k = 2
输出: 7
解释: 在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。
     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。
"""


# ================================================================================
"""
动态规划 包含三个重要概念：
    最优子结构
    边界
    状态转移公式
"""
"""
动态规划2部曲:
    1.状态定义:
        max_profit: mp
            (二维数组)
                i (第一维表示第 i 天，0<-i<=n-1)
                j (第二维表示是否拥有股票, j = 0 或 1)
    2.状态转移公式:
        # 今天结束后没有股票
        mp[i, 0] = max(
            mp[i-1, 0],  # 前一天没有股票，今天不动
            mp[i-1, 1] + prices[i]  # 前一天有股票，今天卖出
        )
        # 今天结束后有股票
        mp[i, 1] = max(
            mp[i-1, 1],  # 前一天有股票，今天不动
            mp[i-1, 0] - prices[i]  # 前一天没有顾，今天买入
        )
        # 发现：因为没有考虑交易次数计数，所以维度不够，需要增加一个维度！！！
"""
"""
动态规划2部曲:
    1.状态定义:
        max_profit: mp
            (三维数组)(解决此问题，需要3维的状态空间)
                i (第一维表示第 i 天，0<-i<=n-1)
                k (第三维表示之前已经进行了多少次交易, 0 <= k <= N)
                j (第二维表示是否拥有股票, j = 0 或 1)
    2.状态转移公式:
        # 今天结束后没有股票
        mp[i, k, 0] = max(
            mp[i-1, k, 0],  # 前一天没有股票，今天不动
            mp[i-1, k-1, 1] + prices[i]  # 前一天有股票，今天卖出
        )
        # 今天结束后有股票
        mp[i, k, 1] = max(
            mp[i-1, k, 1],  # 前一天有股票，今天不动
            mp[i-1, k-1, 0] - prices[i]  # 前一天没有顾，今天买入
        )
        # 
        最后，题目要求的值就是：
        mp[n-1, 0~K, 0] 的最大值（第 n-1 天，最多交易 K 次，最终没有股票）
        
    算法复杂度:
        时间：O（n*k）
        空间：O（n*k*2）= O（n*k）
"""
# ================================================================================
"""
LeetCode 买卖股票的系列问题:
    k = 1 则同 LeetCode 121
    k = 2 则同 LeetCode 123
    k = 无穷大 则同 LeetCode 122
"""
class Solution(object):
    def maxProfit(self, k, prices):
        """
        :type k: int
        :type prices: List[int]
        :rtype: int
        """

# ================================================================================
# ================================================================================
# ================================================================================
# ================================================================================
