#!/usr/bin/env python
# coding:utf-8

"""
375. 猜数字大小 II
难度
中等

我们正在玩一个猜数游戏，游戏规则如下：

我从 1 到 n 之间选择一个数字，你来猜我选了哪个数字。

每次你猜错了，我都会告诉你，我选的数字比你的大了或者小了。

然而，当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。直到你猜到我选的数字，你才算赢得了这个游戏。

示例:

n = 10, 我选择了8.

第一轮: 你猜我选择的数字是5，我会告诉你，我的数字更大一些，然后你需要支付5块。
第二轮: 你猜是7，我告诉你，我的数字更大一些，你支付7块。
第三轮: 你猜是9，我告诉你，我的数字更小一些，你支付9块。

游戏结束。8 就是我选的数字。

你最终要支付 5 + 7 + 9 = 21 块钱。
给定 n ≥ 1，计算你至少需要拥有多少现金才能确保你能赢得这个游戏。
"""


# ================================================================================
"""
注意:
    这不是一个二分查找问题，而是一个动态规划问题!!!
"""
# ================================================================================
"""
错误思路(需要避免):
    求二分查找的最差情况，累加所有的 mid 值。
"""
# class Solution(object):
#     def getMoneyAmount(self, n):
#         """
#         :type n: int
#         :rtype: int
#         """
#         cost = 0
#         left, right = 1, n
#         while left <= right:
#             mid = (left + right)/2
#             if mid == right:
#                 break
#             else:
#                 cost += mid
#                 left = mid + 1
#             pass
#         return cost
# ================================================================================


class Solution(object):
    def getMoneyAmount(self, n):
        """
        :type n: int
        :rtype: int
        """
        # dp = [[0] * (n + 1) for _ in range(n + 1)]
        # for l in range(n - 1, 0, -1):
        #     for r in range(l + 1, n + 1):
        #         dp[l][r] = min(
        #             i + max(dp[l][i - 1], dp[i + 1][r]) for i in range(l, r)
        #         )
        #         pass
        #     pass
        # return dp[1][n]

# ================================================================================
# ================================================================================
# ================================================================================

