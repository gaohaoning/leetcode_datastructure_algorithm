#!/usr/bin/env python
# coding:utf-8

"""
198. 打家劫舍
难度
简单

你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

示例 1:

输入: [1,2,3,1]
输出: 4
解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2:

输入: [2,7,9,3,1]
输出: 12
解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
"""


# ================================================================================
class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        length = len(nums)
        if length == 0:
            return 0
        if length <= 2:
            return max(nums)
        #
        total = list()
        total.append(nums[0])
        total.append(max(nums[0], nums[1]))
        """
        从第3个房屋开始，每增加一个房屋，最大收益等于以下2套方案中获得现金最多的值:
        [1] 不打劫当前房屋（收获等于没有当前房屋的最大值，即前一个值）
        [2] 打劫当前房屋（收获等于没有当前房屋和前一个房屋的收获最大值，加上当前房屋的金额）
        """
        for i in range(2, length):
            total.append(
                max(total[i-1], total[i-2] + nums[i])
            )
            pass
        #
        return total[length-1]
# ================================================================================
# ================================================================================
# ================================================================================


nums = [2, 1, 1, 2]
so = Solution()
print so.rob(nums)

