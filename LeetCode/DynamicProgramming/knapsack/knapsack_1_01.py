#!/usr/bin/env python
# coding:utf-8

"""
01背包
    每个物品只能选择取或不取，即只能取 0个 或 1个。
"""

# ================================================================================


n = 5  # 物品数量
v = 15  # 背包容量
weight = [5, 4, 7, 2, 6]  # 重量数组
value = [12, 3, 10, 3, 6]  # 价值数组


def knapsack_dp(weight, value, n, v):
    # 矩阵尺寸: (n+1) * (v+1)
    # dp[i][j] 表示在前 i 个物品中，能够装入容量为 j 的背包中的最大价值
    dp = [[0 for _ in range(v + 1)] for _ in range(n + 1)]
    # 计算dp数组
    for i in range(1, n+1):
        for j in range(1, v+1):
            # ------------------------------
            if j >= weight[i-1]:
                dp[i][j] = max(
                    dp[i-1][j],  # 不要当前物品 i
                    dp[i-1][j-weight[i-1]] + value[i-1]  # 要当前物品 i
                )
            else:
                dp[i][j] = dp[i-1][j]  # 不要当前物品 i
                pass
            # ------------------------------
            pass
        pass
    print '------------------------------'
    for x in dp:
        print x
        pass
    print '------------------------------'
    return dp[-1][-1]


print '背包承载的最大价值:'
print knapsack_dp(weight, value, n, v)
"""
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
[0, 0, 0, 0, 3, 12, 12, 12, 12, 15, 15, 15, 15, 15, 15, 15]
[0, 0, 0, 0, 3, 12, 12, 12, 12, 15, 15, 15, 22, 22, 22, 22]
[0, 0, 3, 3, 3, 12, 12, 15, 15, 15, 15, 18, 22, 22, 25, 25]
[0, 0, 3, 3, 3, 12, 12, 15, 15, 15, 15, 18, 22, 22, 25, 25]
"""
# ================================================================================
"""
01背包
    状态转义方程:
        dp[i][j] = max(
            dp[i-1][j],  # 不要当前物品 i
            dp[i-1][j-weight[i-1]] + value[i-1]  # 要当前物品 i
        )
"""
"""
背包问题 FAQ
    每次迭代时，最大价值不可能降低；
    行的排列顺序发生变化，结果不变；
    无法处理只拿走物品一部分的情况（要么拿走整件物品，要么不拿）（这种情况应该用贪婪算法）；
    无法处理子问题相互依赖的情况（动态规划要求，每个子问题都是离散的，不依赖于其他子问题）；
    最终解可能包含2件以上的商品，但实际上最多只需要合并2个子背包，不会涉及2个以上的子背包；
    最终解可能导致背包没有装满；
"""
# ================================================================================
# ================================================================================
# ================================================================================
# ================================================================================
